{"cells":[{"cell_type":"markdown","metadata":{"id":"WbgJxLYnddes"},"source":["# Linear Scan\n","\n","In this algorithm, we scan an array of values looking for a specific value. We can stop the scan as soon as we find the value we are looking for.\n","\n","**Time Complexity:** This algorithm is very simple and has a time complexity of O(n).\n","\n","![Linear Scan](../img/2.1-linear-scan.jpg)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pbF6sgtjddey","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728913279276,"user_tz":-540,"elapsed":328,"user":{"displayName":"Meftahul Jannat","userId":"18250337957663492256"}},"outputId":"32495670-a90f-4788-8e21-669d23e781e7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Value 21 found at index 2.\n"]}],"source":["# Function for Linear Scan to find a value in an array\n","def linear_scan(arr,target):\n","  idx = 0\n","  while idx < len(arr):\n","    if arr[idx] == target:\n","      return idx\n","    idx +=1\n","  return - 1\n","\n","# Example usage\n","array = [10, 15, 21, 30, 45]\n","\n","# Value to find\n","value_to_find = 21\n","\n","# Perform linear scan\n","result = linear_scan(array, value_to_find)\n","\n","if result != -1:\n","    print(f\"Value {value_to_find} found at index {result}.\")\n","else:\n","    print(f\"Value {value_to_find} not found in the array.\")"]},{"cell_type":"markdown","metadata":{"id":"qMeQvxAJdde1"},"source":["# Binary Search\n","\n","Binary search is a fast search algorithm with a time complexity of O(log n). This search algorithm works on the principle of divide and conquer. For this algorithm to work properly, the data collection should be in a _sorted_ form.\n","\n","**Time Complexity:** The time complexity of the binary search algorithm is O(log n).\n","\n","![Binary Search](../img/2.2-binary-search.jpg)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"l-wWdgmUdde1","executionInfo":{"status":"aborted","timestamp":1728914338823,"user_tz":-540,"elapsed":7,"user":{"displayName":"Meftahul Jannat","userId":"18250337957663492256"}}},"outputs":[],"source":["# Function for Binary Search to find a value in a sorted array\n","def binary_search(A, target):\n","  # Define the initial bounds (high, low)\n","  high = len(A) - 1    # last index\n","  low = 0              # first index\n","\n","  # Search whilw search space is valid\n","  while low <= high:\n","    mid = (high + low)  // 2 # middle index\n","\n","\n","  # Check if middle is our target\n","  if A[mid] == target:\n","    print(\"Congratulations!\")\n","    return True, mid\n","  elif A[mid] < target:\n","    low = mid + 1 # Value is in the right half\n","  else:\n","    high = mid - 1 # Value is in the left half\n","\n","  return -1\n","\n","\n","# Example usage (array must be sorted for binary search)\n","array = [10, 15, 21, 30, 45]\n","\n","# Value to find\n","value_to_find = 21\n","\n","# Perform binary search\n","result = binary_search(array, value_to_find)\n","\n","if result != -1:\n","    print(f\"Value {value_to_find} found at index {result}.\")\n","else:\n","    print(f\"Value {value_to_find} not found in the array.\")"]},{"cell_type":"markdown","metadata":{"id":"w6Gz_B5_dde2"},"source":["# Array Double\n","\n","When the array is full, we can create a new array with double the size of the original array and copy all the elements to the new array.\n","\n","**Time Complexity:** This operation has a time complexity of O(n).\n","\n","![Array Double](../img/2.3-array-double.jpg)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2R6oAdNfdde3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1728912980060,"user_tz":-540,"elapsed":619,"user":{"displayName":"Meftahul Jannat","userId":"18250337957663492256"}},"outputId":"6f05c12b-4e87-4253-97e8-13c8a7a295cc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Original array: [10, 20, 30, 40, 50]\n","Array after resizing: [10, 20, 30, 40, 50, None, None, None, None, None]\n"]}],"source":["# Function to double the size of the array\n","def array_double(A):\n","  L = len(A)\n","  new_size = L * 2\n","  new_array = [None] * new_size\n","\n","  j = 0\n","  while j < L:\n","    new_array[j] = A[j]\n","    j += 1\n","\n","  return new_array\n","\n","# Example usage\n","array = [10, 20, 30, 40, 50]  # Given array (5 items long)\n","\n","print(\"Original array:\", array)\n","\n","# Double the size of the array and add the new value\n","new_array = array_double(array)\n","\n","print(\"Array after resizing:\", new_array)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hLCNHZhYdde4"},"outputs":[],"source":["# If you want to add a new value at the next available position,\n","# pass in the new value as a second parameter and use the following code.\n","new_array[len(arr)] = new_value\n"]},{"cell_type":"markdown","metadata":{"id":"E2vLrw71dde4"},"source":["# Linked List Lookup\n","\n","In a linked list, we have to traverse the list from the beginning to find the desired element.\n","\n","**Time Complexity:** The time complexity of this operation is O(n).\n","\n","![Linked List Lookup](../img/2.4-linked-list-lookup.jpg)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eG9mcd29dde5","executionInfo":{"status":"ok","timestamp":1728886004137,"user_tz":-540,"elapsed":412,"user":{"displayName":"Meftahul Jannat","userId":"18250337957663492256"}},"outputId":"146c6f00-c0b9-4e84-8499-7bfea62c0960"},"outputs":[{"output_type":"stream","name":"stdout","text":["Element at index 2 is 30.\n"]}],"source":["# Function to lookup an element in a linked list by index\n","class ListNode:\n","  def __init__(self, value  = 0, next = None):\n","    self.value = value\n","    self.next = next\n","\n","\n","def linked_list_lookup(head, ele_num):\n","  current = head\n","  index = 0\n","\n","  # Traverse the list\n","  while index < ele_num and current is not None:\n","      current = current.next\n","      index += 1\n","\n","  #check if the element was found\n","  return current. value if current is not None else None\n","\n","  '''\n","  Above code is the same as:\n","\n","  if current is not None:\n","    return current.value\n","  else\n","    return None\n","  '''\n","\n","# Example usage\n","# Creating a linked list: 10 -> 20 -> 30 -> 40 -> 50\n","node1 = ListNode(10)\n","node2 = ListNode(20)\n","node3 = ListNode(30)\n","node4 = ListNode(40)\n","node5 = ListNode(50)\n","\n","# Linking nodes\n","node1.next = node2\n","node2.next = node3\n","node3.next = node4\n","node4.next = node5\n","\n","# Head of the linked list\n","linked_list_head = node1\n","\n","# Element number to look up\n","element_number = 2\n","\n","# Perform lookup\n","result = linked_list_lookup(linked_list_head, element_number)\n","\n","if result is not None:\n","    print(f\"Element at index {element_number} is {result}.\")\n","else:\n","    print(f\"Element at index {element_number} does not exist in the linked list.\")"]},{"cell_type":"markdown","metadata":{"id":"xxCiDmNwdde6"},"source":["# Linked List Insert\n","\n","In a linked list, we can insert an element at the beginning, middle, or end of the list.\n","\n","**Time Complexity:** The time complexity of this operation is O(1) for inserting at the beginning or end of the list. For inserting in the middle of the list, the time complexity is O(n).\n","\n","![Linked List Insert After](../img/2.5-linked-list-insert-after.jpg)\n","![Linked List Insert](../img/2.6-linked-list-insert.jpg)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xWES67pMdde6","executionInfo":{"status":"ok","timestamp":1728885592699,"user_tz":-540,"elapsed":417,"user":{"displayName":"Meftahul Jannat","userId":"18250337957663492256"}},"outputId":"6ef11d18-a59b-4d3e-d792-9fa1a62d0997"},"outputs":[{"output_type":"stream","name":"stdout","text":["Original list:\n","10 -> 20 -> 30 -> 40 -> Null\n","After inserting 5 at the beginning:\n","5 -> 10 -> 20 -> 30 -> 40 -> Null\n","After inserting 50 at the end:\n","5 -> 10 -> 20 -> 30 -> 40 -> 50 -> Null\n","After inserting 25 at position 2:\n","5 -> 10 -> 25 -> 20 -> 30 -> 40 -> 50 -> Null\n"]}],"source":["# Function to insert a node in a linked list\n","def insert_at_beginning(head, new_value):\n","  new_node = ListNode(new_value)\n","  new_node.next = head\n","  return new_node # New head of the list\n","\n","def insert_at_end(head, new_value):\n","  new_node = ListNode(new_value)\n","  if head is None:\n","    return new_node # New head of the list (if empty)\n","\n","  current = head\n","  while current.next is not None:\n","    current = current.next\n","\n","  current.next = new_node\n","  return head # Head unchanged\n","\n","\n","def insert_in_middle(head, new_value, position):\n","  new_node = ListNode(new_value)\n","  if position == 0: # base case\n","     insert_at_beginning(head, new_value)\n","\n","\n","\n","  current = head # similar linked_list_lookup(head, num_ele)at\n","  index = 0\n","\n","\n","  # Traverse the list (to JUST BEFORE we want to insert)\n","  while index < position - 1 and current is not None:\n","    current = current.next\n","    index += 1\n","\n","  if current is None:\n","    return head #position is 0B, do nothing\n","\n","\n","  #Insert at correct position\n","  new_node.next = current.next\n","  current.next = new_node\n","  return head\n","\n","def print_list(head): #N -> N -> N ->\n","    current = head\n","    while current is not None:\n","      print(current.value, end = \" -> \")\n","      current = current.next\n","    print(\"Null\")\n","\n","\n","\n","# Example usage\n","head = ListNode(10)\n","head = insert_at_end(head, 20)\n","head = insert_at_end(head, 30)\n","head = insert_at_end(head, 40)\n","\n","print(\"Original list:\")\n","print_list(head)\n","\n","# Insert at the beginning\n","head = insert_at_beginning(head, 5)\n","print(\"After inserting 5 at the beginning:\")\n","print_list(head)\n","\n","# Insert at the end\n","head = insert_at_end(head, 50)\n","print(\"After inserting 50 at the end:\")\n","print_list(head)\n","\n","# Insert in the middle (e.g., at position 2)\n","head = insert_in_middle(head, 25, 2)\n","print(\"After inserting 25 at position 2:\")\n","print_list(head)"]},{"cell_type":"markdown","metadata":{"id":"uuxghSzTdde7"},"source":["# Linked List Delete\n","\n","In a linked list, we can delete an element from the beginning, middle, or end of the list.\n","\n","**Time Complexity:** The time complexity of this operation is O(1) for deleting from the beginning or end of the list. For deleting from the middle of the list, the time complexity is O(n).\n","\n","![Linked List Delete](../img/2.7-linked-list-delete.jpg)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dUYY9Cqzdde8","executionInfo":{"status":"ok","timestamp":1728887205377,"user_tz":-540,"elapsed":393,"user":{"displayName":"Meftahul Jannat","userId":"18250337957663492256"}},"outputId":"ea55eebe-ba01-45ce-9341-8578735b3b17"},"outputs":[{"output_type":"stream","name":"stdout","text":["Original list:\n","10 -> 20 -> 30 -> 40 -> Null\n","After deleting node at index 2:\n","10 -> 20 -> 40 -> Null\n"]}],"source":["# Function to delete a node in a linked list by index or value\n","def delete_by_index(head, index):\n","  # base case\n","  if index < 0:\n","    return head # Invalid index\n","\n","\n","\n","  # special case : delete head (index = 0)\n","  if index == 0:\n","    return head.next # Next node becomes new head\n","\n","  current = head # similar linked_list_lookup(head, num_ele)at\n","  count = 0\n","\n","  # Traverse the list (to JUST BEFORE we want to insert)\n","  while count < index - 1 and current is not None:\n","    current = current.next\n","    count += 1\n","\n","  if current is None or current.next is None:\n","    return head #position is 0B, do nothing\n","\n","  # Delete the correct Node\n","  current.next = current.next.next\n","  return head\n","\n","# Example usage\n","head = ListNode(10)\n","head = insert_at_end(head, 20)\n","head = insert_at_end(head, 30)\n","head = insert_at_end(head, 40)\n","\n","print(\"Original list:\")\n","print_list(head)\n","\n","# Delete by index (e.g., index 2)\n","head = delete_by_index(head, 2)\n","print(\"After deleting node at index 2:\")\n","print_list(head)\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"c3o8qTQDdde8"},"outputs":[],"source":[]},{"cell_type":"code","source":["def delete_by_value(head, value):\n","  if head is not None and head.value == value:\n","    return head.next # Bypass (delete) original head\n","\n","  current = head\n","\n","  # Traverse the list\n","  while current is not None and current.next is not None:\n","    if current.next.value == value:\n","      current.next = current.next.next\n","      return head\n","    # else, value not found, continue to next Node\n","    current = current.Next\n","\n","  return head # Value not found\n","\n","\n","# Delete by value (e.g., value 20)\n","head = delete_by_value(head, 20)\n","print(\"After deleting node with value 20:\")\n","print_list(head)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yPX03Bjhs5pX","executionInfo":{"status":"ok","timestamp":1728887660615,"user_tz":-540,"elapsed":340,"user":{"displayName":"Meftahul Jannat","userId":"18250337957663492256"}},"outputId":"256d31ef-5720-459c-9f47-3cec9c4b93ff"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["After deleting node with value 20:\n","10 -> 40 -> Null\n"]}]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.12.1"},"colab":{"provenance":[{"file_id":"1LTecxzIOE8cJdWS8Dh0qmUw6ANrN4woP","timestamp":1728887766259}]}},"nbformat":4,"nbformat_minor":0}